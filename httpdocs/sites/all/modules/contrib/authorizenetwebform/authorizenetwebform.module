<?php 

/**
 * @file
 * Authorize.Net Webform Module File
 *
 * The Authorize.Net Webform module allows a site admin to enable payment
 * through Authorize.Net for any webform.
 */
 
define('AUTHORIZENETWEBFORM_MODE','live'); // Can be 'live' or 'test'.

/**
 * Implementation of hook_form_alter()
 *
 * Allow for editing webforms to enable the user to pay for a webform submission
 * with a credit or debit card through Authorize.Net
 */
function authorizenetwebform_form_alter(&$form, &$form_state, $form_id) {
  // handle webform client forms (instances of webforms that are submitted)  
  // webform names client forms with the pattern web_form_client_form_$nid, use this knowledge to
  // manipulate the forms that webform displays
  switch (true) {
    case (strpos($form_id, 'webform_client_form_') !== FALSE):
      
      $node = $form['#node'];
          
      // only deal with this form if it is supposed to go to Authorize.Net
      if (empty($node->use_authorizenet)) {
        return ;
      } else {
        // new validation handler
        $form['#validate'][] = 'authorizenetwebform_validate';

        // add new submit handler. based on webform_php model
        // adding it as *second* handler (not sure why...)
        $first = array_shift($form['#submit']);
        array_unshift($form['#submit'], $first, 'authorizenetwebform_submit');
      }
      break;
    
    // handle editing of webform nodes
    case ($form_id == 'webform_node_form'):
    
      /* Collapse the email info on the page assuming that it is going to be an Authorize.net form */
      $form['mailsettings']['#collapsed'] = TRUE;

      $authorizenet_form['authorizenetsettings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Authorize.Net Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => -2,
      );
    
      $authorizenet_form['authorizenetsettings']['use_authorizenet'] = array(
        '#type' => 'radios',
        '#title' => t('Allow Payment via Authorize.Net'),
        '#options' => array(
          1 => t('Yes'),
          0 => t('No'),
        ),
        '#description' => t('If yes, the form\'s results will be processed via Authorize.Net.  The credit card enetered will be validated & authorized before the form is formally submitted.'),
        '#default_value' => isset($form['#node']->use_authorizenet) ? (int) $form['#node']->use_authorizenet : 0,
      );

      // integrate the Authorize.Net form into the form
      $pos = array_search('mailsettings', array_keys($form)) + 1;
      $form = array_merge(array_slice($form, 0, $pos), $authorizenet_form, array_slice($form, $pos));
      break; 
      
    // handle editing fields on the webform
    case ($form_id == 'webform_component_edit_form'):
      $node = node_load($form['nid']['#value']);
      // if the user has specified the Authorize.Net action, then we will be posting the form to Authorize.Net
      if ($node->use_authorizenet) {
        module_load_include('inc', 'authorizenetwebform', 'authorizenetwebform_fields');
        foreach (authorizenetwebform_available_fields() as $anwafkey => $anwafvalue) {
          $anwafkey = strtolower($anwafkey);
          $anwaf_array[$anwafkey] = $anwafvalue;
        }
        $variable = 'authorizenetwebform_key_map_' . $form['nid']['#value'];
        $map = variable_get($variable,array());
        $form_key = $form['form_key']['#default_value'];
        $selected = array_key_exists($form_key, $map) ? $map[$form_key] : '';
        $valid_fields = array_merge($anwaf_array, authorizenetwebform_load_custom_fields('webform'));
        $anet_form_key = array(
          '#type' => 'select',
          '#title' => t('Authorize.Net Field Key'),
          '#multiple' => FALSE,
          '#options' => $valid_fields,
          '#description' => t('Select an Authorize.Net field that this form field will map to.  If you switch the form to an email for this will be used as the machine readable key.'),
          '#weight' => $form['form_key']['#weight'],
          '#default_value' => $selected,
        ); 
        $form['#submit'][] = 'authorizenet_field_key_submit';
        $form['advanced']['anet_field_key'] = $anet_form_key;
        $form['advanced']['#collapsed'] = FALSE;
      }
      break;

  }
}

/**
 * Submit function for storing the field key mapping.
 */
function authorizenet_field_key_submit($form,&$form_state) {
	$variable = 'authorizenetwebform_key_map_' . $form_state['values']['nid'];
	$map = variable_get($variable, array());
	$values = $form_state['values'];
	$form_key = $values['form_key'];
	$anet_form_key = $values['advanced']['anet_field_key'];
	$map[$form_key] = $anet_form_key;
	variable_set($variable, $map);
}

/**
 * Implementation of hook_node_load().
 */
function authorizenetwebform_node_load($nodes, $types) {
  // Reject if none of the nodes are webforms.
  if (!in_array('webform', $types)) {
    return;
  }

  // Otherwise, loop through the nodes.
  foreach ($nodes as $nid => $node) {
    $result = db_query("SELECT enabled FROM {authorizenetwebform} WHERE nid = ?", array($node->nid))->fetchField(); 
    $node->use_authorizenet = (bool) $result;
  }
}

/**
 * Implementation of hook_node_insert().
 */
function authorizenetwebform_node_insert($node) {
  if ($node->type == 'webform') {
    db_insert('authorizenetwebform')
      ->fields(array(
        'nid' => $node->nid,
        'enabled' => $node->use_authorizenet,
      ))
      ->execute();
  }
}

/**
 * Implementation of hook_node_update().
 */
function authorizenetwebform_node_update($node) {
  if ($node->type == 'webform') {
    db_update('authorizenetwebform')
      ->fields(array(
        'enabled' => $node->use_authorizenet,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_menu()
 *
 * Add menu item for administering the module.
 */
function authorizenetwebform_menu() {
  $items = array();

  $items['admin/config/content/authorizenetwebform'] = array(
    'title' => 'Authorize.Net Payment Webform',
    'description' => 'Configure Authorize.Net webform integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authorizenetwebform_admin_settings'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Page callback for admin settings page.
 */
function authorizenetwebform_admin_settings() {
  $form = array();

  $form['authorizenetwebform_url'] = array(
    '#type' => 'select',
    '#title' => t('Authorize.Net Post URL'),
    '#description' => t('Select the URL for the Authorize.Net server you wish to post to.'),
    '#options' => array('test' => t('https://test.authorize.net/gateway/transact.dll (Developers)'), 'main' => t('https://secure.authorize.net/gateway/transact.dll (Main, incl. Testing)')),
    '#weight' => -3,
    '#default_value' => variable_get('authorizenetwebform_url', 'test'),
  );
  $form['field_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authorize.Net custom field settings'),
    '#description' => t('Allows you to configure your custom field settings to show in the field selection for Authorize.Net webforms'),
    '#weight' => -2,
  );
  $form['field_settings']['authorizenetwebform_custom_fields'] = array(
    '#type' => 'textarea',
    '#title' => t("Custom Fields"),
    '#default_value' => authorizenet_create_custom_field_spec(variable_get('authorizenetwebform_custom_fields', NULL)),
    '#description' => t('A list of additional fields configured for transactions to Authorize.Net. One field per line, with field name and description seperated by pipes. i.e. safe_key|Some readable option.  See the Implementation Guide at http://developer.authorize.net/guides/AIM/ for more details.'),
    '#rows' => 5,
    '#weight' => -2,
  );
  $form['login'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authorize.net Login'),
  );
  $form['login']['authorizenetwebform_login'] = array(
      '#type' => 'textfield',
      '#title' => t('Authorize.Net API Login ID'),
      '#description' => t('Enter your Authorize.Net API Login ID - NOT your username.'),
      '#weight' => -1,
  );
  $form['login']['authorizenetwebform_transaction'] = array(
      '#type' => 'password',
      '#title' => t('Authorize.Net transaction key'),
      '#description' => t('Enter your Authorize.Net Transaction Key.  It will not be displayed here once it is entered, for security purposes.  If you need to change it, please re-enter it.'),
  ); 
  $form['login']['authorizenetwebform_change_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Change Login Information'),
    '#description' => t('Check this to override the current login information with the entered values.')
  );
  $form['#validate'][] = 'authorizenetwebform_parse_custom_field_spec';

  return system_settings_form($form); 
}

function authorizenetwebform_parse_custom_field_spec($form, &$form_state) {
  $custom_fields = array();
  $custom_field_spec = $form_state['values']['authorizenetwebform_custom_fields'];
  if ( !empty($custom_field_spec) ) {
    $custom_field_tmp = explode("\n", $custom_field_spec);
    foreach ( $custom_field_tmp as $field ) {
      if ( empty($field) ) break ;
      $new_field = explode("|", $field);
      $custom_fields[$new_field[0]] = $new_field[1];
    }
  }
  if ( $form_state['values']['authorizenetwebform_change_login'] === 0 ) {
    form_set_value($form['login']['authorizenetwebform_login'], variable_get('authorizenetwebform_login', NULL), $form_state);
    form_set_value($form['login']['authorizenetwebform_transaction'], variable_get('authorizenetwebform_transaction', NULL), $form_state);
  }
  form_set_value($form['field_settings']['authorizenetwebform_custom_fields'], $custom_fields, $form_state);
}

function authorizenet_create_custom_field_spec($custom_fields) {
  if ( empty($custom_fields) ) {
    return "";
  } 
  
  $spec = "";
  foreach ( array_keys($custom_fields) as $field ) {
    $field_string = $field ."|". $custom_fields[$field] ."\n";
    $spec .= $field_string;
  }
  return $spec;
}

/**
 * Return an array of all entries submitted, but with the
 * key replaced based on the authorizenet mapping
 * for the web form
 **/
function authorizenetwebform_translate_keys($submitted,$map) {
  $ret = array();
  reset($submitted);
  
  while(list($k,$v) = each($submitted)) {
    if(array_key_exists($k,$map)) {
      $k = $map[$k];
    }
    $ret[$k] = $v;
  }
  return $ret;
}

/* 
 * Process a webform submission through Authorize.Net
 *
 * @param $step
 *  Identify whether the webform is being validated ("validate") or submitted
 *  ("submit")
 * @param $node
 *  The full webform object
 * @param $form
 *  A form array
 * @param $form_state
 *  A form state array
 * @return $form_state
 *  A form state array
 */
function authorizenetwebform_process($step, $node, $form_state) {
  // DO NOT forward to Authorize.net if there are errors in the form validation
  if (form_get_errors()) {
    return $form_state;
  }
  module_load_include('inc', 'authorizenetwebform', '/authorizenetwebform_fields');

  // store values in our own private variable 
  $form_values = $form_state['values'];

  // Flatten the user-submitted data (in case the data is nested within fieldsets).
  $submitted_data = _array_flatten($form_state['values']['submitted'], true);

  // get key mappings for this webform
  $nid = $form_values['details']['nid'];
  $variable = 'authorizenetwebform_key_map_' . $nid;
  $map = variable_get($variable,array());
  
  // we also want to access keys in the other direction
  $flipped_map = array_flip($map);
  
  // remove any non-numeric characters from expiration date
  // like / or -
  $exp_date_key = $flipped_map['x_exp_date'];
  if(array_key_exists($exp_date_key, $form_values['submitted'])) {
    $submitted_data[$exp_date_key] = preg_replace('/[^0-9]+/', '', $submitted_data[$exp_date_key]);
  }

  // get an array with the webform keys replaced with the authorizenet keys
  $submitted = authorizenetwebform_translate_keys($submitted_data, $map);

  // Not the greatest way to store the transaction id (kind of hackish), but the best we can do until #288199 is fixed.
  if ($submitted['x_trans_id'] == "" && $step == "submit") {
    $submitted['x_trans_id'] = $_SESSION['anwf_trans_id'];
    unset($_SESSION['anwf_trans_id']);
  }

  // Build a submission array that will be sent to authorizenet
  $master_fields = array_merge(authorizenetwebform_available_fields(), authorizenetwebform_load_custom_fields(NULL));
  $submission = array();
  foreach ($master_fields as $mkey => $mvalue) {
    if (array_key_exists(strtolower($mkey), $submitted)) {
      $submission[$mkey] = $submitted[strtolower($mkey)];
    }
  }
  
  if (isset($submission['anwf_quantity']) && is_numeric($submission['anwf_quantity'])) {
    $submission['x_amount'] = ((double) $submission['x_amount']) * ((double) $submission['anwf_quantity']);
  }
  $post_vars = array();
  foreach ($submission as $key => $value) {
    if (strcmp(substr($key, 0, 2), "x_") == 0 && $value != "") {
      $post_vars[$key] = $value;
    }
  }

  // Authorize.Net required field information
  $posturl = variable_get('authorizenetwebform_url', NULL);
  $post_url = ($posturl == "main") ? "https://secure.authorize.net/gateway/transact.dll" : "https://test.authorize.net/gateway/transact.dll";
  $post_vars['x_login'] = variable_get('authorizenetwebform_login', NULL);
  $post_vars['x_tran_key'] = variable_get('authorizenetwebform_transaction', NULL);
  $post_vars['x_version']      = "3.1";
  $post_vars['x_delim_data']    = "TRUE";
  $post_vars['x_delim_char']    = "|";
  $post_vars['x_relay_response']  = "FALSE";
  $post_vars['x_method'] = "CC";
  if(AUTHORIZENETWEBFORM_MODE == 'test') {
    $post_vars['x_test_request '] = "TRUE";
  }
  
  if ($step == "validate") {
    $post_vars['x_type'] = 'AUTH_ONLY';
  }
  if ($step == "submit") {
    // If there was a problem getting the Auth previously, we need to auth & capture in one step.
    $post_vars['x_type'] = !array_key_exists('x_trans_id', $post_vars) ? 'AUTH_CAPTURE' : 'PRIOR_AUTH_CAPTURE';
  }
  
  // This section takes the input fields and converts them to the proper format
  // for an http post.  For example: "x_login=username&x_tran_key=a1B2c3D4"
  $post_string = "";
  foreach ( $post_vars as $key => $value ) { 
    $post_string .= "$key=" . urlencode($value) . "&"; 
  } 
  $post_string = rtrim($post_string, "& ");
  $request = curl_init($post_url); // initiate curl object
    curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
    curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
    curl_setopt($request, CURLOPT_POSTFIELDS, $post_string); // use HTTP POST to send form data
    curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE); // uncomment this line if you get no gateway response.
    $post_response = curl_exec($request); // execute curl post and store results in $post_response
  @curl_close ($ch); // close curl object

  // This line takes the response and breaks it into an array using the specified delimiting character
  $response_array = explode($post_vars["x_delim_char"], $post_response);

  if ($step == "validate") {
    if ($response_array[2] > 1) {
      watchdog('authorizenetwebform', 'Error response from Authorize.net: %response', array("%response" => "<pre>". print_r($response_array, TRUE) ."</pre>"));
      //There was some type of error getting an authorization.  Flag it
      form_set_error('submitted][x_card_num', t('There was an error processing your credit card: %anetresponse If the error persists, please try another card.', array("%anetresponse" => $response_array[3])));
    }
    if ($response_array[6] != "") {

      // Setting items in the original form_values to replace.
      $replacements = array(
        $flipped_map['x_trans_id'] => $response_array[6],
      );

      //Not the greatest way to store the transaction id (kind of hackish), but the best we can do until #288199 is fixed.
      $_SESSION['anwf_trans_id'] = $response_array[6];
    }  
  }
  if  ($step == "submit") {
    if ($response_array[2] > 1) {
      watchdog('authorizenetwebform', 'Error response from Authorize.net: %response', array("%response" => "<pre>". print_r($response_array, TRUE) ."</pre>"));
      //There was some type of error getting an authorization.  Flag it
      $cc_key = $flipped_map['x_card_num'];
      $form_key = "submitted][$cc_key";
      form_set_error($form_key, t('There was an error processing your credit card: %anetresponse If the error persists, please try another card.', array("%anetresponse" => $response_array[3])));
    }

    $replacements = array();
    $cids = flatten_array_by_cids($node);
    
    //blank out all but the last 4 CC #'s
    $cc = $submitted[$cids[$flipped_map['x_card_num']]];
    $cclen = strlen($cc);
    $end = $cclen - 4;
    $anon_cc = substr_replace($cc, 'xxxxxxx', 0, $end);
    $replacements[$cids[$flipped_map['x_card_num']]] = $anon_cc;
    
    //blank out the expiration date as well
    $replacements[$cids[$flipped_map['x_exp_date']]] = 'xxxxxx';
    
    //blank out the security code as well
    $replacements[$cids[$flipped_map['x_card_code']]] = 'xxx';
    
    if ($response_array[6] != "") {
      //We have a transaction ID.  Set it in the webform
      $replacements[$cids[$flipped_map['x_trans_id']]] = $response_array[6];
    }
  }

  // Replace the old values with the new ones.
  array_walk_recursive($form_values['submitted'], '_replace_value_in_recursive', $replacements);
  //Return our temporary values to the $form_state array
  $form_state['values'] = $form_values;
  
  return $form_state;
}

/**
 * Code to execute when webform is validated 
 **/
function authorizenetwebform_validate($form, &$form_state) {
	$node = node_load($form_state['values']['details']['nid']);
	$form_state = authorizenetwebform_process("validate", $node, $form_state);
}

/**
 * Code to execute when webform is submitted
 **/
function authorizenetwebform_submit($form, &$form_state) {
	$node = node_load($form_state['values']['details']['nid']);
	$form_state = authorizenetwebform_process("submit", $node, $form_state);
}

/**
 * Utility function to flatten a multidimensional array.
 */
function _array_flatten($array, $preserve_keys = false) {
  if (!$preserve_keys) {
    // ensure keys are numeric values to avoid overwritting when array_merge gets called
    $array = array_values($array);
  }

  $flattened_array = array();
  foreach ($array as $k => $v) {
    if (is_array($v)) {
      $flattened_array = array_merge($flattened_array, call_user_func(__FUNCTION__, $v, $preserve_keys));
    } elseif ($preserve_keys) {
      $flattened_array[$k] = $v;
    } else {
      $flattened_array[] = $v;
    }
  }
  return $flattened_array;
}

/**
 * Utility function for replacing the transaction ID in the original
 * (unflattened) array.
 */
function _replace_value_in_recursive(&$item, $key, $replacements) {
  if (array_key_exists($key, $replacements)) {
    $item = $replacements[$key];
  }
}

function flatten_array_by_cids($node) {
  $cids = array();
  foreach ($node->webform['components'] as $component) {
    if ($component['type'] != 'fieldset') {
      $cids[$component['form_key']] = $component['cid'];
    }
  }
  return $cids;
}