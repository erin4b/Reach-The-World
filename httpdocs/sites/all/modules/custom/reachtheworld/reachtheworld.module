<?php

module_load_include('inc','pagination','includes/Pagination');

/**
 * Implements hook_admin_paths_alter()
 **/
function reachtheworld_admin_paths_alter(&$path){
  $path['user'] = FALSE;
  $path['user/*'] = FALSE;
}

/**
 * Implements hook_menu().
 **/
function reachtheworld_menu(){
  // general view, edit, delete for files
  $items['user/%user/file/add'] = array(
    'title' => 'Add file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reachthe_file_entity_add_upload', array()),
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
  );
  if (module_exists('plupload') && module_exists('multiform')) {
    $items['user/%user/file/add']['page arguments'] = array('file_entity_add_upload_multiple');
  }
  return $items;
}

/**
 * Implements hook_menu_alter()
 **/
function reachtheworld_menu_alter(&$items){
  //unset($items['user/%user/messages']);
  /*
  $new_message = $items['messages/new'];
  unset($items['messages/new']);
  $new_message['page arguments'] = array('privatemsg_new',4,5,NULL);
  $items['user/%user/messages/new'] = $new_message;
  */
}

/**
 * Implements hook_views_query_alter()
 **/
function reachtheworld_views_query_alter(&$view,&$query){
  switch($view->name){
    case 'journey_content':
      switch($view->display_handler->display->id){
        case 'field_notes':
          switch(arg(3)){
            case 'daily-life':
              $title = 'Daily Live';
              $value = array('fn_daily_life'=>'fn_daily_life');
            break;
            case 'food':
              $title = 'Food';
              $value = array('fn_food'=>'fn_food');
            break;
            case 'kids':
              $title = 'Kid Lives';
              $value = array('fn_kids_lives'=>'fn_kids_lives');
            break;
            case 'transportation':
              $title = 'Transportation';
              $value = array('fn_transportation'=>'fn_transportation');
            break;
            case 'nature':
              $title = 'Nature';
              $value = array('fn_nature'=>'fn_nature');
            break;
            case 'traditions':
              $title = 'Traditions';
              $value = array('fn_traditions'=>'fn_traditions');
            break;
            case 'environment':
              $title = 'Environment';
              $value = array('fn_nations'=>'fn_nations');
            break;
            case 'communities':
              $title = 'World Connections';
              $value = array('fn_world_connections'=>'fn_world_connections');
            break;
            default:
              $title = '';
              $value = $query->where[1]['conditions'][1]['value'];
          }
          $view->display_handler->display->display_title .= " ".$title;
          $query->where[1]['conditions'][1]['value'] = array_values($value);
        break;
      }
    break;
  }
}

function reactheworld_file_entity_add_upload($form, &$form_state, array $options = array()) {
  $form['upload'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload a new file'),
    '#upload_location' => file_entity_upload_destination_uri($options),
    '#upload_validators' => file_entity_get_upload_validators($options),
    '#progress_indicator' => 'bar',
    '#required' => TRUE,
    '#pre_render' => array('file_managed_file_pre_render', 'file_entity_upload_validators_pre_render'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');

  return $form;
}

/**
 * Implements hook_block_info()
 **/
function reachtheworld_block_info(){
  return array(
    'rtw_content_block' => array(
      'info' => t('RTW Content Form Block'),
      'cache' => DRUPAL_NO_CACHE
    ),
    'rtw_node_block' => array(
      'info' => t('RTW Node'),
      'cache' => DRUPAL_NO_CACHE
    )
  );
}

/**
 * Implements hook_block_view()
 **/
function reachtheworld_block_view($delta=''){
  switch($delta){
    case 'rtw_node_block':
      $block = array();
      $block['subject'] = t('RTW Node Block');
      $block['content'] = rtw_node_block();
      return $block;
    break;
    case 'rtw_content_block':
      $block = array();
      $block['subject'] = t('RTW Content Form Block');
      $block['content'] = drupal_get_form('rtw_content_block_form');
      return $block;
    break;
  }
}

function rtw_node_block(){
  if(arg(1) != ''){
    $node = node_load(arg(1));
    if($node){
      $pg     = Pagination::instance();
      $page   = $pg->getPageVar();
      $paging = 300;
      $style  = $pg->getStyle($node->type);

      $node_body = drupal_render(node_view(clone $node));

      $pg->paginate($node_body, $paging);
      $body = cleaning($pg->getPage($page));

      if ($style < PAGINATION_TOC)  {
        $body .= $pg->getPager();
      }

      if ($style > PAGINATION_DEFAULT && $pg->getPageCount() > 1)  {
        $body = $pg->getToc($node->nid) . $body;
      }

      return $body;
    }
  }
  return '';
}

function rtw_content_block_form($form,&$form_state){
  $form['content_type_selector'] = array(
    '#type' => 'select',
    '#options' => array(''=>'Select','fn_daily_life'=>'Field Note - Daily Life'),
    '#title' => t('Select Article Type'),
    '#ajax' => array(
      'callback' => 'article_type_selector',
      'wrapper' => 'article-type',
      'method' => 'replace',
      'effect' => 'fade'
    )
  );

  $form['content-types'] = array(
    '#type' => 'fieldest',
    '#prefix' => '<div id="article-type">',
    '#suffix' => '</div>'
  );

  return $form;
}

function article_type_selector($form,$form_state){
  // Drupal 7    
  // Embed node creation form on a custom page inside module.
  module_load_include('inc', 'node', 'node.pages');
  $type = $form_state['values']['content_type_selector'];
  if($type != ''){
    $drupal_form = node_add($form_state['values']['content_type_selector']);
    $drupal_form['actions']['submit']['#ajax'] = array(
      'wrapper' => 'article-type',
      'callback' => 'node_add_callback',
      'method' => 'replace',
      'effect' => 'fade'
    );
    print '<pre>';
    print_r($drupal_form);
    print '</pre>';
    return $drupal_form;
  }
  return array();
}

function node_add_callback($form,$form_state){
  return array();
}

/**
 * Implements hook_panels_pane_content_alter()
 **/
function reachtheworld_panels_pane_content_alter($content, $pane, $args, $context){
  return $content;
}


function cleaning($what_to_clean, $tidy_config='' ) {
   
    $config = array(
        'show-body-only' => true,
        'clean' => true,
        'char-encoding' => 'utf8',
        'add-xml-decl' => true,
        'add-xml-space' => true,
        'output-html' => false,
        'output-xml' => false,
        'output-xhtml' => true,
        'numeric-entities' => false,
        'ascii-chars' => false,
        'doctype' => 'strict',
        'bare' => true,
        'fix-uri' => true,
        'indent' => true,
        'indent-spaces' => 4,
        'tab-size' => 4,
        'wrap-attributes' => true,
        'wrap' => 0,
        'indent-attributes' => true,
        'join-classes' => false,
        'join-styles' => false,
        'enclose-block-text' => true,
        'fix-bad-comments' => true,
        'fix-backslash' => true,
        'replace-color' => false,
        'wrap-asp' => false,
        'wrap-jste' => false,
        'wrap-php' => false,
        'write-back' => true,
        'drop-proprietary-attributes' => false,
        'hide-comments' => false,
        'hide-endtags' => false,
        'literal-attributes' => false,
        'drop-empty-paras' => true,
        'enclose-text' => true,
        'quote-ampersand' => true,
        'quote-marks' => false,
        'quote-nbsp' => true,
        'vertical-space' => true,
        'wrap-script-literals' => false,
        'tidy-mark' => true,
        'merge-divs' => false,
        'repeated-attributes' => 'keep-last',
        'break-before-br' => true,
    );
   
    if( $tidy_config == '' ) {
        $tidy_config = &$config;
    }
   
    $tidy = new tidy();
    $out = $tidy->repairString($what_to_clean, $tidy_config, 'UTF8');
    unset($tidy);
    unset($tidy_config);
    return($out);
}
?>
